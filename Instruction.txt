WHAT SHOULD I DO FIRST BEFORE STARTING THIS PROJECT
	1. Understanding the dining philosophers problem.
	2. Learn about pthreads and mutex in C.
	3. Creating threads, sync with mutex and handling the timing.
	4. Memory should be handle correctly and no LEAKS.
	5. To prevent deadlock when philo eating it should take one fork and wait
		it better to make it as ODD/EVEN eat first

WHAT I NEED TO LEARN FIRST
	1. Multithreadin:
		. Creating and managing thread using pthread_create, pthread_join
		. Sync thread to avoid data race and deadlock
	2. Mutex:
		. Using pthread_mutex_init, pthread_mutex_lock, pthread_mutex_unlock to protect shared resources(Forks)
		. Ensure that philo pickup fork without any conflicts
	3. Time management:
		. Using gettimeofday and usleep for more accurate time tracking
		. Enforcing time_to_die, time_to_eat, time_to_sleep constrains
	A. Dining Philo problem:
		> Mutex ordering:(always pick the lowest number fork first)
		> Deadlock prevention:( allowing N - 1 philo eat at once)
	B. Thread Safe Logging
		> Use a mutex to ensure log massage ("X" is eating) not overlap
	C. Program structure
		> Philo as Thread
		> Forks as Mutex
		> A supervisor thread to monitor starvation and terminate the simulation
	D. Argument Parsing
		> Validate input like number_of_philo and time_to_die


fsanitiza=address
fsanitize=thread

