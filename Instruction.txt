WHAT SHOULD I DO FIRST BEFORE STARTING THIS PROJECT
	1. Understanding the dining philosophers problem.
	2. Learn about pthreads and mutex in C.
	3. Creating threads, sync with mutex and handling the timing.
	4. Memory should be handle correctly and no LEAKS.
	5. To prevent deadlock when philo eating it should take one fork and wait
		it better to make it as ODD/EVEN eat first

WHAT I NEED TO LEARN FIRST
	1. Multithreadin:
		. Creating and managing thread using pthread_create, pthread_join
		. Sync thread to avoid data race and deadlock
	2. Mutex:
		. Using pthread_mutex_init, pthread_mutex_lock, pthread_mutex_unlock to protect shared resources(Forks)
		. Ensure that philo pickup fork without any conflicts
	3. Time management:
		. Using gettimeofday and usleep for more accurate time tracking
		. Enforcing time_to_die, time_to_eat, time_to_sleep constrains
	A. Dining Philo problem:
		> Mutex ordering:(always pick the lowest number fork first)
		> Deadlock prevention:( allowing N - 1 philo eat at once)
	B. Thread Safe Logging
		> Use a mutex to ensure log massage ("X" is eating) not overlap
	C. Program structure
		> Philo as Thread
		> Forks as Mutex
		> A supervisor thread to monitor starvation and terminate the simulation
	D. Argument Parsing
		> Validate input like number_of_philo and time_to_die


fsanitiza=address
fsanitize=thread

What a pthread_create?
> a function that create thread
Then what is a thread??
> a small program inside a main program, its running parallel with other thread
> example, Im solving a math problem and at the same time i ask my friend to help solve the 2nd math problem
	at the same time.
> When we tread is created, they will shared the same memory and data with the main
> So since everything is shared so does the variable
> THINGS TO CONSIDER: IF ONE THREAD CRASHES, MIGHT CRASHES THE WHOLE PROGRAM

ptheard_t tid; where tid is: Thread ID, works same as pid
pthread_join(pthread_t thread, void **retval(return value))<< So when put NULL means we dont care bout the return value
Example;

main()
 └── calls pthread_create → spawns Thread A
         └── Thread A runs function
 └── calls pthread_join(Thread A)
         └── main waits here until Thread A is done
 └── continues after thread ends

>THREAD CAN ONLY BE JOINED ONCE,
> WHEN A THREAD IS DETACHED, IT CANNOT BE JOINED AGAIN

pthread_create (pthread_t *thre ad(tid), const pthread_attr_t * attr(optional thread attributes like stack usually null), void *(*start routine)(void *)(the function that new
thread will run, must take void * and return void*)(RUNNING THE FUNCTION), void *arg(the argument that we want to pass, usually NULL));


